<KEYWORD> public
<KEYWORD> class
<IDENTIFIER> input_file
<LEFT_BRACE> {
<KEYWORD> public
<KEYWORD> static
<VTYPE> int
<KEYWORD> main
<LEFT_PAREN> (
<VTYPE> String
<LEFT_BRANKET> [
<RIGHT_BRANKET> ]
<IDENTIFIER> args
<RIGHT_PAREN> )
<LEFT_BRACE> {
<VTYPE> int
<IDENTIFIER> a_integer
<ASSIGNMENT_OPERATOR> =
<SIGNED_INTEGER> 1
<TERMINATING_SYMBOL> ;
<VTYPE> char
<IDENTIFIER> _bd_1102
<ASSIGNMENT_OPERATOR> =
<SINGLE_CHARACTER> 'B'
<TERMINATING_SYMBOL> ;
<VTYPE> boolean
<IDENTIFIER> __compiler__
<ASSIGNMENT_OPERATOR> =
<BOOLEAN> true
<TERMINATING_SYMBOL> ;
<VTYPE> int
<IDENTIFIER> _12
<ASSIGNMENT_OPERATOR> =
<SIGNED_INTEGER> -12
<ARITHMETIC_OPERATOR> -
<SIGNED_INTEGER> 0
<TERMINATING_SYMBOL> ;
<VTYPE> String
<IDENTIFIER> d_123
<ASSIGNMENT_OPERATOR> =
<LITERAL_STRING> "Hello Universe!"
<TERMINATING_SYMBOL> ;
<VTYPE> char
<IDENTIFIER> for_while_if
<ASSIGNMENT_OPERATOR> =
<SINGLE_CHARACTER> ' '
<TERMINATING_SYMBOL> ;
<VTYPE> int
<LEFT_BRANKET> [
<RIGHT_BRANKET> ]
<IDENTIFIER> staticlist
<ASSIGNMENT_OPERATOR> =
<LEFT_BRACE> {
<SIGNED_INTEGER> 100
<COMMA> ,
<SIGNED_INTEGER> -10
<COMMA> ,
<SIGNED_INTEGER> 2
<RIGHT_BRACE> }
<TERMINATING_SYMBOL> ;
<KEYWORD> if
<LEFT_PAREN> (
<IDENTIFIER> a_integer
<COMPARISON_OPERATOR> <
<SIGNED_INTEGER> 0
<RIGHT_PAREN> )
<LEFT_BRACE> {
<IDENTIFIER> a_integer
<ASSIGNMENT_OPERATOR> =
<IDENTIFIER> a_integer
<ARITHMETIC_OPERATOR> +
<SIGNED_INTEGER> 32
<ARITHMETIC_OPERATOR> *
<SIGNED_INTEGER> 27
<ARITHMETIC_OPERATOR> /
<LEFT_PAREN> (
<SIGNED_INTEGER> -1
<ARITHMETIC_OPERATOR> +
<SIGNED_INTEGER> 3
<RIGHT_PAREN> )
<RIGHT_BRACE> }
<KEYWORD> else
<KEYWORD> if
<LEFT_PAREN> (
<IDENTIFIER> a_integer
<COMPARISON_OPERATOR> ==
<SIGNED_INTEGER> 0
<RIGHT_PAREN> )
<LEFT_BRACE> {
<IDENTIFIER> d_123
<ASSIGNMENT_OPERATOR> =
<LITERAL_STRING> "a_integer is 0"
<RIGHT_BRACE> }
<KEYWORD> else
<LEFT_PAREN> (
<IDENTIFIER> a_integer
<COMPARISON_OPERATOR> >
<SIGNED_INTEGER> 0
<RIGHT_PAREN> )
<LEFT_BRACE> {
<KEYWORD> if
<LEFT_PAREN> (
<IDENTIFIER> a_integer
<COMPARISON_OPERATOR> >=
<SIGNED_INTEGER> 3
<RIGHT_PAREN> )
<LEFT_BRACE> {
<IDENTIFIER> for_while_if
<ASSIGNMENT_OPERATOR> =
<SINGLE_CHARACTER> 'K'
<RIGHT_BRACE> }
<RIGHT_BRACE> }
<KEYWORD> while
<LEFT_PAREN> (
<IDENTIFIER> _12
<COMPARISON_OPERATOR> <=
<SIGNED_INTEGER> 0
<RIGHT_PAREN> )
<LEFT_BRACE> {
<IDENTIFIER> _12
<ASSIGNMENT_OPERATOR> =
<IDENTIFIER> _12
<ARITHMETIC_OPERATOR> +
<SIGNED_INTEGER> 2
<RIGHT_BRACE> }
<KEYWORD> return
<SIGNED_INTEGER> 0
<TERMINATING_SYMBOL> ;
<RIGHT_BRACE> }
<RIGHT_BRACE> }
