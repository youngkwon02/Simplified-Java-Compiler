<KEYWORD> public
<KEYWORD> class
<IDENTIFIER> test
<LEFT_BRACE> {
<KEYWORD> public
<KEYWORD> static
<VTYPE> int
<KEYWORD> main
<LEFT_PAREN> (
<VTYPE> String
<LEFT_BRACKET> [
<RIGHT_BRACKET> ]
<IDENTIFIER> args
<RIGHT_PAREN> )
<LEFT_BRACE> {
<VTYPE> char
<IDENTIFIER> character
<ASSIGNMENT_OPERATOR> =
<SINGLE_CHARACTER> 'b'
<ARITHMETIC_OPERATOR> +
<SINGLE_CHARACTER> 'c'
<ARITHMETIC_OPERATOR> -
<SINGLE_CHARACTER> 'b'
<ARITHMETIC_OPERATOR> -
<SINGLE_CHARACTER> 'a'
<TERMINATING_SYMBOL> ;
<VTYPE> int
<IDENTIFIER> num
<ASSIGNMENT_OPERATOR> =
<SIGNED_INTEGER> 1
<ARITHMETIC_OPERATOR> -
<SIGNED_INTEGER> -1
<ARITHMETIC_OPERATOR> -
<SIGNED_INTEGER> -2
<ARITHMETIC_OPERATOR> -
<SIGNED_INTEGER> 3
<TERMINATING_SYMBOL> ;
<VTYPE> int
<IDENTIFIER> num2
<ASSIGNMENT_OPERATOR> =
<SIGNED_INTEGER> -1
<ARITHMETIC_OPERATOR> +
<SIGNED_INTEGER> 3
<ASSIGNMENT_OPERATOR> =
<SIGNED_INTEGER> -1
<ARITHMETIC_OPERATOR> -
<SIGNED_INTEGER> 8
<LEFT_PAREN> (
<SIGNED_INTEGER> -3
<RIGHT_PAREN> )
<ARITHMETIC_OPERATOR> +
<SIGNED_INTEGER> -2
<TERMINATING_SYMBOL> ;
<VTYPE> boolean
<IDENTIFIER> case
<ASSIGNMENT_OPERATOR> =
<BOOLEAN_STRING> true
<TERMINATING_SYMBOL> ;
<KEYWORD> while
<LEFT_PAREN> (
<IDENTIFIER> case
<RIGHT_PAREN> )
<LEFT_BRACE> {
<IDENTIFIER> case
<ASSIGNMENT_OPERATOR> =
<BOOLEAN_STRING> false
<COMPARISON_OPERATOR> !=
<BOOLEAN_STRING> false
<TERMINATING_SYMBOL> ;
<RIGHT_BRACE> }
<VTYPE> String
<IDENTIFIER> d_12
<ASSIGNMENT_OPERATOR> =
<LITERAL_STRING> "Hello Universe!"
<TERMINATING_SYMBOL> ;
<IDENTIFIER> index
<ASSIGNMENT_OPERATOR> =
<SIGNED_INTEGER> 0
<TERMINATING_SYMBOL> ;
<KEYWORD> if
<LEFT_PAREN> (
<IDENTIFIER> index
<COMPARISON_OPERATOR> >=
<SIGNED_INTEGER> 0
<RIGHT_PAREN> )
<LEFT_BRACE> {
<IDENTIFIER> index
<ARITHMETIC_OPERATOR> +
<ASSIGNMENT_OPERATOR> =
<SIGNED_INTEGER> 1
<TERMINATING_SYMBOL> ;
<IDENTIFIER> print
<LEFT_PAREN> (
<LITERAL_STRING> "This is"
<ARITHMETIC_OPERATOR> +
<IDENTIFIER> d_12
<RIGHT_PAREN> )
<TERMINATING_SYMBOL> ;
<RIGHT_BRACE> }
<IDENTIFIER> print
<LEFT_PAREN> (
<LITERAL_STRING> "index:"
<RIGHT_PAREN> )
<TERMINATING_SYMBOL> ;
<IDENTIFIER> print
<LEFT_PAREN> (
<IDENTIFIER> index
<RIGHT_PAREN> )
<TERMINATING_SYMBOL> ;
<KEYWORD> return
<SIGNED_INTEGER> 0
<TERMINATING_SYMBOL> ;
<RIGHT_BRACE> }
<RIGHT_BRACE> }
